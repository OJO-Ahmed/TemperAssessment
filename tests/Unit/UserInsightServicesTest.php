<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UserInsightServicesTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userInsightService = $this->app->make('App\Services\UserInsightService');

    }
    /**
     * A basic unit test.
     *
     * @return void
     */
    public function testRandomColor()
    {

        $actual = $this->userInsightService->generateRandomColor();
        $firstletter = str_split($actual);

        $this->assertEquals(7,strlen($actual));
        $this->assertEquals('#',$firstletter[0]);
    }

    public function testGroupUsersWeekly(){
        $all_dates = ['2016-03-19', '2016-03-26', '2016-04-02'];
        $weeklyUsers = [
            "2016-03-19" => [
                "40", "40", "40", "100", "100", "40", "99", "40", "99", "40",
                "100", "50", "100", "40", "100", "40", "40", "40", "40", "40",
            ],
            "2016-03-26" => [
                "95", "100", "40", "40", "99", "40", "40", "40", "40", "40",
                "99", "40", "99", "40", "100", "100", "40", "40", "40", "100",
            ],
            "2016-04-02" => [
                "40", "95", "100", "40", "95", "99", "40", "40", "55", "40",
                "99", "95", "99", "100", "40", "99", "99", "40", "50", "99",
            ]
        ];

        $actual = $this->userInsightService->groupUsersWeekly($all_dates, $weeklyUsers);
        $expected = [
            "2016-03-19" => [
                [40, 60],
                [50, 5],
                [99, 10],
                [100, 25],
            ],
            "2016-03-26" => [
                [40, 60],
                [95, 5],
                [99, 15],
                [100, 20]
            ],
            "2016-04-02" => [
                [40, 35],
                [50, 5],
                [55, 5],
                [95, 15],
                [99, 30],
                [100, 10]
            ]
        ];

        $this->assertEquals($expected,$actual);
    }

    public function testSplitArrayKeyValue(){
        $testData = [
            "35" => 0.8928571428571428,
            "40" => 50.00000000000005,
            "45" => 1.7857142857142856,
            "50" => 1.7857142857142856,
            "60" => 0.8928571428571428,
            "95" => 2.6785714285714284,
            "99" => 13.392857142857137,
            "100" => 28.57142857142856,
        ];
        $actual = $this->userInsightService->splitandRoundDataTwoDecimal($testData);
        $expected = [
            [35,0.89],
            [40,50],
            [45,1.79],
            [50,1.79],
            [60,0.89],
            [95,2.68],
            [99,13.39],
            [100,28.57]
        ];

        $this->assertEquals($expected,$actual);
    }

    public function testHighChartDataFormat(){
        $testData = [
            '2015-05-12'=>[[45, 1.79], [50,1.79]],
            '2015-05-19'=> [[60, 0.89], [95, 2.68]]
        ];
        $actual = $this->userInsightService->highChartDataFormat($testData);

        $expected = [
            ['name'=> '2015-05-12','data'=> [[0, 100], [45, 1.79], [50,1.79]],'color'=> 'any color'],
            ['name'=> '2015-05-19','data'=> [[0, 100], [60, 0.89], [95, 2.68]],'color'=> 'any color'],
        ];

        for($i = 0; $i < count($testData); $i++){
            $this->assertArrayHasKey('name',$actual[$i]);
            $this->assertArrayHasKey('data',$actual[$i]);
            $this->assertArrayHasKey('color',$actual[$i]);
            $this->assertEquals($expected[$i]['name'],$actual[$i]['name']);
            $this->assertEquals($expected[$i]['data'],$actual[$i]['data']);
        }
        $this->assertCount(2, $actual);
    }
}
